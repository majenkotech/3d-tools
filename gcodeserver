#!/usr/bin/env perl

use strict;

$|=1;

use Device::SerialPort;
use Time::HiRes qw(usleep nanosleep);

use feature "state";

resetPrinter();

while (1) {
    my @files;
    opendir(my $d, "/shared/GCode");
    while (my $file = readdir($d)) {
        if ($file =~ /^(.*).gcode$/) {
            push(@files, $file);
        }
    }
    closedir($d);

    foreach my $file (@files) {
        print "Printing $file...\n";
        rename("/shared/GCode/$file", "/shared/GCode/Processing/$file");
        sendFile("/shared/GCode/Processing/$file");
        my $t = time();
        rename("/shared/GCode/Processing/$file", "/shared/GCode/Done/$t-$file");
    }
    sleep(10);
}


sub openPort() {
    my $port = new Device::SerialPort("/dev/kossel");

    if (!$port) {
        return 0;
    }

    $port->baudrate(115200) || return 0;
    return $port;
}

sub resetPrinter() {
    my $port = openPort() || return;
    sleep(3);
    sendCommand($port, "M117 Print Server Ready.");
    $port->close();
}

sub sendFile($) {
    my $file = shift;

    my $port = openPort() || return;

    my $ready = 0;
    while ($ready == 0) {
        my $l = getLine($port);
        if ($l ne "") {
            if ($l =~ /^echo:\s+(.*)$/) {
                if ($1 eq "External Reset") {
                    $ready = 1;
                } else {
                    print "	$1\n";
                }
            }
        }
    }


    sleep(1);

    open(IN, "<$file") || return;

    my $totalLines = 0;

    while (my $line = <IN>) {
        chomp($line);
        if ($line =~ /^(.*);(.*)$/) {
            $line = $1;
        }
        if ($line ne "") {
            $totalLines ++;
        }
    }
    close(IN);

    my $thisLine = 0;
    my $lastPct = "";

    open(IN, "<$file") || return;

    while (my $line = <IN>) {
        chomp($line);
        if ($line =~ /^(.*);(.*)$/) {
            $line = $1;
        }
        if ($line ne "") {
            $thisLine++;
            my $pct = ($thisLine / $totalLines) * 100;
            my $pcts = sprintf("M117 Printing...     %3d%", $pct);
            if ($pcts ne $lastPct) {
                $lastPct = $pcts;
                sendCommand($port, $pcts) || close(IN);
            }
            sendCommand($port, $line) || close(IN);
        }

        # Check to see if the file went away. If it did then abort.
        if (! -f $file) { 
            close(IN);
            abort($port);
            $port->close();
            return;
        }
    }
    close(IN);
    sendCommand($port, "M117 Print Server Ready.");
    $port->close();
}

sub abort($) {
    my $port = shift;
    sendCommand($port, "M117 Aborted") || return;
    sendCommand($port, "M107") || return;
    sendCommand($port, "M104 S0") || return;
    sendCommand($port, "M140 S0") || return;
    sendCommand($port, "G91") || return;
    sendCommand($port, "G1 E-1 F300") || return;
    sendCommand($port, "G28") || return;
}

sub getLine($) {
    my ($port) = @_;
    state $line = "";
    my $char = $port->read(1);
    if ($char eq "\n") {
        my $ol = $line;
        $line = "";
        return $ol;
    }
    if ($char ge " ") {
        $line .= $char;
    }
    return "";
}

sub fail($) {
    my $msg = shift;
    print "$msg\n";
    return 0;
}

sub sendCommand($$) {
    my $port = shift;
    my $cmd = shift;
    $port->write("$cmd\r") || return fail("Error sending code: $!");
    my $ok = 0;
    my $start = time();
    while ($ok == 0) {
        if (time() - $start > 5) {
            return fail("Error sending code: timeout");
        }
        my $l = getLine($port);
        if ($l ne "") {
            $start = time(); # It is alive.
            if ($l eq "ok") {
                $ok = 1;
            }
            if ($l =~ /^echo:\s+(.*)$/) {
                print "	$1\n";
            }
        }
    }
    return 1;
}

